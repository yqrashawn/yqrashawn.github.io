CLOSED: [2017-11-27 Mon 21:31]
:PROPERTIES:
:ID:       2017-11-27-bimsop-viewer-multi-model
:CREATED:  <2017-11-27 Mon 17:55>
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2017-11-27 Mon 21:31]
:END:

viewer 对于多模型的api与单模型有些不同. 主要体现在对构件(node)的操作和模型树的操
作上.

*** 一些量
**** viewer.models
- 包含一个数组, 数组内是所有加载的模型
- 当使用 ~viewer.unload~ unload模型时, 数组的某些项(被unload的模型)可能为空

#+BEGIN_SRC javascript
-> viewer.models
<- [null, RenderModel, RenderModel]
#+END_SRC

- 数组的第一项(如果有的话), 其 ~id~ 为 ~1~ , 以此类推

#+BEGIN_SRC javascript
-> viewer.models
<- [RenderModel, null, RenderModel]
-> viewer.models[0].id
<- 1
-> viewer.models[2].id
<- 3
#+END_SRC

**** viewer.currentModel
- viewer 最后加载成功的那个模型
- 在一些尚未适配多模型的方法中, 会认为 viewer 只加载了这一个模型

*** 多模型操作
**** 加载多模型
使用 [[http://gb9.bimsop.com/bimsopviewer/test/v0.2/release/docs/index.html#Viewer3D#load][viewer.load]] 方法加载多模型

#+BEGIN_SRC javascript
viewer.load('model url', {}, (loadedModels) => console.log('success', loadedModels));
viewer.load([ 'model1  url', 'model2 url'], {}, (loadedModels) => console.log('success', loadedModels));
viewer.load([ 'model1  url', 'model2 url'], other arguments ...);
viewer.load({ 土建:'model1  url', 给排水: 'model2 url' }, other arguments ...);
viewer.load({土建: [ 'model1  url', 'model2 url'], 给排水: ['model3 url', 'model4 url']}, other arguments ...);
#+END_SRC

**** 获取模型
使用 [[http://gb9.bimsop.com/bimsopviewer/test/v0.2/release/docs/index.html#Viewer3D#getModelById][viewer.getModelById]] 方法获取, viewer 的其他函数操作.

#+BEGIN_SRC javascript
-> const modelId = 0;
-> viewer.getModelById(0)
<- RenderModel
#+END_SRC

当有参数名为 ~model~ 时, 均表示通过此方法获取的 ~RenderModel~ 实例. 例如:

#+BEGIN_SRC javascript
-> viewer.isolate(20, viewer.getModelById(0))
#+END_SRC

**** 加载多模型时一些操作, 事件返回的多模型数据结构
在 viewer 中加载多模型后, 一些操作和事件会拿到类似如下的数据结构

#+BEGIN_SRC json
{
  "externalId": -201000,
  "models": {
    "1": true,
    "3": true
  }
}
#+END_SRC

这时表示, 在 modelId 为1和3的两个模型中, 都拥有 ~externalId~ 为 /-201000/ 的
node, 这时如果想对所有模型的该类型node进行同样的操作时, 可以遍历 ~models~ 中的键,
对每个模型的node进行同样的操作. 如下代码可以孤立所有模型中 ~externalId~ 为
/-201000/ 的node.

#+BEGIN_SRC javascript
const nodeToBeIsolated = {
  "externalId": -201000,
  "models": {
    "1": true,
    "3": true
  }
}

const externalId = nodeToBeIsolated.externalId;
viewer.hideAll(); // 隐藏所有node

// 遍历models
Object.keys(nodeToBeIsolated).forEach(modelId => {
  const model = viewer.getModelById(modelId);

  // 将externalId转换为dbId
  const dbId = model.myData.instanceTree.gBimExternalIdToDbId(externalId);

  // 显示对应模型中的node
  viewer.show(dbId, model);
});
#+END_SRC

